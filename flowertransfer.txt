import tensorflow as tf 
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import Dense , GlobalAveragePooling2D
from tensorflow.keras.models import Model
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.optimizers import Adam
import matplotlib.pyplot as plt
import numpy as np
base_model = MobileNetV2(weights = 'imagenet',include_top = False , input_shape=(224,224,3))
base_model.trainable = False
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(128,activation = 'relu')(x)
predictions = Dense(5,activation = 'softmax')(x)
model = Model(inputs = base_model.input , outputs = predictions)
model.compile (optimizer = Adam(learning_rate = 0.001),
              loss = 'categorical_crossentropy',
              metrics = ['accuracy'])
datagen = ImageDataGenerator(rescale = 1. / 255 , 
                             validation_split = 0.3 ,
                             horizontal_flip = True,
                             zoom_range = 0.2,
                             shear_range = 0.2
                            )
train_datagenerator = datagen.flow_from_directory(
    '11 Flowers/train',
    target_size = (224,224),
    batch_size = 32,
    class_mode = 'categorical',
    subset = 'training' #set as traning data    
)
validation_generator = datagen.flow_from_directory(
    '11 Flowers/test',
    target_size = (224,224),
    batch_size = 32,
    class_mode = 'categorical',
    subset = 'validation'
)
model.fit(train_datagenerator , 
         epochs = 10 ,
         validation_data = validation_generator)
test_loss ,  test_acc = model.evaluate(validation_generator)
x_val , y_val = next(validation_generator)
predictions = model.predict(x_val)
predicted_labels = np.argmax(predictions , axis=1)
class_labels = list(train_datagenerator.class_indices.keys())

n = 10

plt.figure(figsize=(20,6))
for i in range(n):
    ax = plt.subplot(2, n , i+1)
    plt.imshow(x_val[i])

    actual_label = class_labels[np.argmax(y_val[i])]
    predicted_label = class_labels[predicted_labels[i]]

    plt.title(f"Actual : {actual_label} \n Predicted: {predicted_label}")
    plt.axis('off')
plt.show()
