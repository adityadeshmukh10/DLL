import numpy as np
from numpy import loadtxt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense


dataset = loadtxt('diabetes.csv', delimiter=',',skiprows=1)
x = dataset[:,0:8]
y = dataset[:,8]

print(type(x))
print(type(y))
model = Sequential()
model.add(Dense(12,input_shape=(8,),activation='relu'))
model.add(Dense(8,activation='relu'))
model.add(Dense(1,activation='sigmoid'))
model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])
model.fit(x,y,epochs=10,batch_size=10)
loss, accuracy = model.evaluate(x,y)
print(f"model accuracy: {accuracy*100: .2f}%")
predicted_probabilities = model.predict(x)
predicted_classes = (predicted_probabilities > 0.5).astype(int)
print("Actual values", y[:10])
print("Preicted probabilties",predicted_probabilities[:10])
print("predicted_classes",predicted_classes[:10])
from sklearn.metrics import confusion_matrix
conf_matrix = confusion_matrix(y,predicted_classes)
print(conf_matrix)
# 2. Classification Report
from sklearn.metrics import classification_report
class_report = classification_report(y, predicted_classes)
print("Classification Report:\n", class_report)
model.summary()
# Install necessary libraries if not already installed
!pip install matplotlib seaborn

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix

# Calculate confusion matrix
conf_matrix = confusion_matrix(y, predicted_classes)

# Plot the confusion matrix
plt.figure(figsize=(6, 4))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False,
            xticklabels=['Predicted Negative', 'Predicted Positive'],
            yticklabels=['Actual Negative', 'Actual Positive'])

# Add labels, title, and adjust layout
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.title('Confusion Matrix')
plt.show()

